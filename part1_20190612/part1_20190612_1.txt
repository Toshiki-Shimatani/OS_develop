// -----------------------------------------------------------------
//  Author  : Shimatani Toshiki <shimatani@swlab.cs.okayama-u.ac.jp>
//  Make_Date   : 2019/06/12 21:00:44
//  Update_Date : 2019/06/28 21:52:42
//  Filename: part1_20190612_1.txt
// -----------------------------------------------------------------

　今日から自作OSに挑戦してみる．参考にするのは以下のWebサイト，文献である．
____________________________________________________________________
--　参考　-----------------------------------------------------------
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
[1]  0から作るOS開発 URL:http://softwaretechnique.jp/OS_Development/index.html
[2] 「30日でできる! OS自作入門」 はじめました URL:https://blog.binfish.jp/os/hello-world/
[3]  30日でできる! OS自作入門　川合秀実，毎日コミュニケーションズ，2006-03-01
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

　まず初めに，開発環境として以下のソフトウェアをインストールする．
--------------------
(A) Cygwin
(B) VirtuelBox
(C) BinaryEditorBz（以降Bzとする）
--------------------
　(A)の Cygwin については別のメモを参照してほしい．基本的にこのコンソールを用いて，
OS のイメージファイル作成等を行う．インストール後は，nasm が入っていることを
確認する．入っていなければ ，Cygwinのコンソール上で
# apt-cyg install nasm 
と入力し，nasm をインストールする．apt-cyg コマンドが使えない場合は，先に apt-cyg コマンドを
インストールしてほしい．あると便利．
nasm とはアセンブラである．GASというものもあるそうだが，nasm が手っ取り早くインストールできたため，
これを使用する．

　(B)の VirtuelBox は作成した OS のイメージファイルを読み込んで自作OSを起動する際に使用する．
インストールの仕方および設定に関しては参考[2]を見てほしい．一応インストール手順をノウハウメモに残しておく．
設定に関してはここで説明する．以下の内容は,VirtualBox-6.0.8で確認している．
途中，イメージファイルを選択する部分がある．このイメージファイルは自作するOS本体である．
Cygwin上で nasm を用いて作成する．
------------------------------
(1) VirtualBoxを起動する．すると，Oracle VM VirtualBox マネージャーというウインドウが開く．
(2) ウインドウ中の"新規(N)"という箇所をクリックする．
(3) 仮想マシンの作成 というウインドウが開いたら，"名前とオペレーティングシステム"という項目の
    "名前"の欄に適当な名前を入れる(例えば MyOSなど)．そして"タイプ(T)"を Otherに，
    "バージョン(V)"を Other/Unknown に設定する．
    "メモリーサイズ(M)"の項目では 64 MB を設定する(このくらいで十分，足りなくなったら増やす)．
    上記の操作をしたら"作成"ボタンをクリックする．
(4) 仮想ハードディスクの作成 というウインドウが開いたら，設定を変更せずに"作成"ボタンをクリックする．
(5) (4)までの操作を完了すると，VirtualBox マネージャー ウインドウ上に作成した仮想計算機が表示される．
    作成した仮想計算機をクリックすると{part1_1.jpg}のような画面が表示される．
    この画面の"設定(S)"という箇所をクリックする．
(6) "(作成した仮想計算機の名前) - 設定"というウインドウが開いたら，ストレージを選択する．
    "ストレージデバイス(S)"の枠の下に並んだ4つのアイコンの内，一番左をクリックする(カーソルを合わせると，
    "新しいストレージコントローラを追加します"と表示される)．すると，○○コントローラを追加という項目が
    並んだメニューが表示されるため，"フロッピーコントローラを追加"をクリックする．
    すると，フロッピーコントローラが作成される．
(7) 作成したフロッピーコントローラが読み取るディスクイメージファイルを選択する．
    フロッピーコントローラの右に表示される＋のついたアイコンをクリックし，"ディスクを選択"ボタンをクリックする．
    エクスプローラの中から，読み込むイメージファイルを選択する．
    ここで読み込むイメージファイルはCygwin上で nasm を用いて作成する(今後，ここらへんが変わるかもしれない)．
    すると，選択したイメージファイル名が，"コントローラ: Floppy"の下に表示される．
(8) VirtualBox マネージャー ウインドウに戻り，作成した仮想計算機を選択後，"起動(T)"アイコン(右矢印)を
    クリックする．
(9) 別ウインドウが立ち上がり，自作OSが読み込まれる．
------------------------------


　(C)の Bz は 作成したOSのイメージがバイナリ形式でどのように書かれているかを
確認する際に使用する．これを用いるとなんとなくでも参考サイトや参考文献の説明がわかると思う．
Webサイト "窓の杜" よりインストール可能．

　これらのインストールが終わっているものとして以下では行ったことを述べていく．

　ひとまず 参考[1] をベースにアセンブリファイル{boot_1.0.asm}を作成し，
nasm を用いてアセンブルした．boot_1.0.asmは同じディレクトリ(フォルダ)中に置いておく．
今後，{}で囲まれたファイルは同じディレクトリ(フォルダ)中にあるものとする．

　アセンブルした後に作成するイメージファイルの名前は boot.img とした．
これは Cygwin 上で以下のコマンドで作成できる．
-------------------------
# nasm -o boot.img <アセンブリファイルの名前(このときはboot_1.0.asm)>
-------------------------

　作成したイメージファイル(boot.img)をVirtualBoxで起動したところ，何も出力されずにカーソルが点滅するのみとなった．
この状態が成功である．試しに，イメージファイルをBzを使って全て0に書き換えてVirtualBoxで起動したところ，以下のような出力がされた．
---------------------------------------------------
FATAL: No bootable medium found! System halted.
---------------------------------------------------
つまり，boot可能なメディアとして認識されなかった．
このことから boot_1.0.img をアセンブルしたイメージファイルは boot可能なOSとして認識されていることがわかる．

　ここで，以下の boot_1.0.asm の中で使用されている語の説明をする．
-----------------------------------------------
    [BITS 16]
    ORG     0x7C00
    BOOT:
    CLI
    HLT
    TIMES 510 - ($ - $$) DB 0
    DW 0xAA55
-----------------------------------------------
===============================================================================================================================
******************
** [BITS 16] 
******************
　これは nasm が 16 ビットモード，32 ビットモード，あるいは64ビットモードで動作するプロセッサ上で動作するように設計されたコードを
生成するかどうかを指定するアセンブラディレクティブである．
　多くの場合，　BITS命令を明示的に使用する必要はないらしい．16ビットモードの nasmで32ビットデータを使用する命令の
先頭には0x66が付き，32ビットアドレスを参照する命令には0x67がつくことに注意する．
nasm が32ビットモードのときに，16ビットのデータやアドレス参照をする際には上記のプレフィックスと
同様のことが言える．nasm が64ビットモードの際の挙動は32ビットモードとほとんど同じである．
ただし，レジスタの数が違うことと16ビットのアドレスがサポートされないことに注意する．
64ビットの際は，上記のプレフィックスで32ビットのデータやアドレスを取り扱える?

また，BITS と 数字の間にスペースが必要なことに注意する．例えば[BITS16]は無効である．
ちなみに[]はなくてもかまわない．

[参考サイト] : https://nasm.us/doc/nasmdoc6.html

******************
** ORG  0x7C00
******************
　ORG命令は nasm における擬似命令の1つであり，プログラムが読み込まれるアドレスを指定するためのものである．
この命令をもとに，メモリに書き込む番地の計算を自動でやってくれる．この命令で，アドレスを指定しなかった場合は
暗黙的に"ORG 0"が指定されたものとしてメモリアドレスの計算が行われる．
　
　bootプログラムの場合，ORGが指定する値は 0x7c00 である．これは BIOS がブートプログラムをメモリの 0x7C00 番地に格納するためである．
なぜ，0x7C00 番地に格納しているかは以下のサイトを参照してほしい．
-------------------------------------------------------------
Assembler/なぜx86ではMBRが"0x7C00"にロードされるのか？（完全版）
URL : https://www.glamenv-septzen.net/view/614
-------------------------------------------------------------

　ちなみに，ORGの語源は「Origin」であるそう．意味は開始点．

******************
** BOOT:
******************
　アセンブラにおいて，<文字列> + ":" のこの形はラベルを表す．ラベルを用いると，プログラムのアドレスを直接指定する代わりに
ラベル名で指定できる．jump命令などを用いる際にラベルを使う．

******************
** CLI
******************
　CLIは(Clear Interrupt Flag)の略でIFフラグをクリア(0に)する命令である．
IFフラグは(Interrupt enable Flag)の略で，このフラグがOFF(0)のとき割り込みが無視される．
つまり，CLI命令を使用すると，IFフラグがON(1)になるまで割り込みが発生しなくなる．

フラグに関しては以下のサイトが参考になる．
[参考サイトURL] : http://wisdom.sakura.ne.jp/programming/asm/assembly13.html

******************
** HLT
******************
　HLTは(Halt)の略でプロセッサをHALT状態にする命令である．
HALT状態とは，待機状態のことである．割り込みがあればCPUは目を覚まし，
プログラムの続きを実行する．

******************
** TIMES 510 - ($ - $$) DB 0
******************
  この行は，"TIMES"，"510 - ($ - $$)" ，および "DB 0" に分けることができる．
　+------------------------------------------------------------------------------------
　|  ****
　|  * TIMES  
　|　****
　|　TIMES 命令はプリプロセッサで処理される疑似命令である．
　|　疑似命令は x86 マシンの命令ではないが，アセンブラ上で使用できる命令のことである．
　|　TIMES 命令の機能は，TIMESの後に繰り返し回数と繰り返す命令を指定することで，
　|　指定した命令を指定した回数分繰り返すというものである．
　|　繰り返し可能な命令は疑似命令だけではなく，x86 マシンの命令も可能である．
　|　
　|　****
　|　* 510 - ($ -$$)
　|　****
　|　これは TIMES コマンドで繰り返す回数を指定している部分である．
　|　"$" はこのシンボル($)が使用された行の先頭アドレスを意味する．
　|　"$$" はこのシンボル($$)が使用されたセクションの先頭を意味する． 
　|　この場合,"$$" は CLI 命令のアドレスを意味する．
　|
　|　****
　|　* DB 0
　|　****
　|　DB 命令はオペランドで指定した数値を 1 バイトのデータとしてメモリに格納する命令である．
　|　DB は (Define Byte) の略である．ここでは 0 が指定されているため，値 0 の 1 バイトをメモリに格納する．
　|　DB も疑似命令の 1 つである．
　|
  +-----------------------------------------------------------------------------------
  上記のことをまとめると，この１行は，"値が0である1バイトを508バイト目まで配置する" ことを意味する．

　***************
　*** DW 0xAA55
　***************
  DW は NASM の疑似命令の１つである．この命令はオペランドとして与えられた値（１ワード）をメモリに配置することを意味する．
  16ビット環境の場合は，１ワードは２バイトである．このため，この命令は 'AA','55'の２バイトをメモリに配置することを意味する．
  この2バイトはブートシグネチャと呼ばれ，MBR(マスターブートレコード)が正常かどうかを表すマジックナンバーである．
  この値が不正である場合，このセクタはブートセクタと認識されない．このため，BIOSからブートストラップローダに制御が移されない．
  BIOSからはOSのイメージが見つからないといった類のメッセージが出力される．
===============================================================================================================================

次に，フロッピーディスクのファイルシステムであるFAT(File Allocation Table)に関する記述をしていく．
FATの中でも特に容量が少ないフロッピーディスクに使用されるものがFAT12である．
FAT12の仕様は以下のURLからダウンロード可能である．
-------
http://msdn.microsoft.com/en-us/library/windows/hardware/gg463080.aspx
-------
仕様書を読むと，9ページ目から "Boot Sector and BPB Structure"という表がある．
これはFAT12の最初のセクタに書くべきヘッダのようなものらしい．
ここで，"Boot Sector"(ブートセクタ)とは最初にBIOSが読むセクタのことである．つまり，上記のboot_1.0.asmの記述は
ブートセクタの内容を記述していると言える．
"BPB"は”BIOS Parameter Block"の略で，ディスクのセクタ数などを記録するものであるらしい．
これらの仕様は決まっているため，仕様書に沿って今後の作成をする．

参考[1]中の以下のページを参考に，boot_1.0.asmの内容を書き加えた．
-----
http://softwaretechnique.jp/OS_Development/bootloader4.html
-----
書き加えた後のファイル名を,boot_1.1.asmとする．書き加えた内容を以下に示す．
内容の説明は上記のページに書いてあるため，そちらを参考にしてほしい．
------------------------------------------------------------
;==================================================================================
; BIOS parameter blocks(FAT12)
;==================================================================================
JMP	BOOT		;BS_jmpBoot
BS_jmpBoot2	DB	0x90
BS_OEMName	DB	"MyOS    "
BPB_BytsPerSec	DW	0x0200		;BytesPerSector
BPB_SecPerClus	DB	0x01		;SectorPerCluster
BPB_RsvdSecCnt	DW	0x0001		;ReservedSectors
BPB_NumFATs	DB	0x02		;TotalFATs
BPB_RootEntCnt	DW	0x00E0		;MaxRootEntries
BPB_TotSec16	DW	0x0B40		;TotalSectors
BPB_Media	DB	0xF0		;MediaDescriptor
BPB_FATSz16	DW	0x0009		;SectorsPerFAT
BPB_SecPerTrk	DW	0x0012		;SectorsPerTrack
BPB_NumHeads	DW	0x0002		;NumHeads
BPB_HiddSec	DD	0x00000000	;HiddenSector
BPB_TotSec32	DD	0x00000000	;TotalSectors

BS_DrvNum	DB	0x00		;DriveNumber
BS_Reserved1	DB	0x00		;Reserved
BS_BootSig	DB	0x29		;BootSignature
BS_VolID	DD	0x20120627	;VolumeSerialNumber 日付を入れました
BS_VolLab	DB	"MyOS       "	;VolumeLabel
BS_FilSysType	DB	"FAT12   "	;FileSystemType
------------------------------------------------------------

ここでは，初めて登場した DD 命令についてのみ説明する．
DD 命令はNASM の疑似命令の１つである．この命令はオペランドとして与えられた値（2ワード）をメモリに配置することを意味する．
つまり，x86 マシンの場合，4バイトをメモリに配置することを意味する．


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
長くなってきたので，2つに分けることにする．
続きは"part1_20190612_2.txt"にて．